openapi: 3.0.0
info:
  title: Node.js + MySQL API - User Management with Email Verification
  description: >
    API documentation for Node.js + MySQL Boilerplate API with email verification, authentication, and password reset functionality.
    
    The API provides everything required for user management including registration, 
    verification, authentication, password reset, and CRUD operations for user accounts.
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          description: Account identifier
        title:
          type: string
          description: Title (Mr, Mrs, etc)
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [Admin, User]
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        isVerified:
          type: boolean
    AuthenticateRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    AuthenticateResponse:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        role:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        isVerified:
          type: boolean
        jwtToken:
          type: string
    RegisterRequest:
      type: object
      required:
        - title
        - firstName
        - lastName
        - email
        - password
        - confirmPassword
        - acceptTerms
      properties:
        title:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        confirmPassword:
          type: string
        acceptTerms:
          type: boolean
    VerifyEmailRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ValidateResetTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    ResetPasswordRequest:
      type: object
      required:
        - token
        - password
        - confirmPassword
      properties:
        token:
          type: string
        password:
          type: string
          minLength: 6
        confirmPassword:
          type: string
    CreateRequest:
      type: object
      required:
        - title
        - firstName
        - lastName
        - email
        - password
        - confirmPassword
        - role
      properties:
        title:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        confirmPassword:
          type: string
        role:
          type: string
          enum: [Admin, User]
    UpdateRequest:
      type: object
      properties:
        title:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        confirmPassword:
          type: string
        role:
          type: string
          enum: [Admin, User]
paths:
  /accounts/authenticate:
    post:
      summary: Authenticate
      description: Authenticate user credentials and generate JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticateRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        '400':
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /accounts/refresh-token:
    post:
      summary: Refresh Token
      description: Use refresh token to generate a new JWT token
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticateResponse'
        '400':
          description: Invalid token
  /accounts/revoke-token:
    post:
      summary: Revoke Token
      description: Revoke a refresh token
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Token revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Token is required
        '401':
          description: Unauthorized
  /accounts/register:
    post:
      summary: Register Account
      description: Register a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
  /accounts/verify-email:
    post:
      summary: Verify Email
      description: Verify email with token sent after registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Verification failed
  /accounts/forgot-password:
    post:
      summary: Forgot Password
      description: Submit email to receive password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /accounts/validate-reset-token:
    post:
      summary: Validate Reset Token
      description: Validate token from reset password email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateResetTokenRequest'
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid token
  /accounts/reset-password:
    post:
      summary: Reset Password
      description: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid token or validation error
  /accounts:
    get:
      summary: Get All Accounts
      description: Returns all accounts (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
    post:
      summary: Create Account
      description: Create a new account (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequest'
      responses:
        '200':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
  /accounts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get Account by ID
      description: Returns the account with specified ID if authorized
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '401':
          description: Unauthorized
        '404':
          description: Account not found
    put:
      summary: Update Account
      description: Update account details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        '200':
          description: Account updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '400':
          description: Validation error
        '401':
          description: Unauthorized
        '404':
          description: Account not found
    delete:
      summary: Delete Account
      description: Delete account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Account deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Account not found
